# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _alm
else:
    import _alm

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _alm.delete_SwigPyIterator

    def value(self):
        return _alm.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _alm.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _alm.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _alm.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _alm.SwigPyIterator_equal(self, x)

    def copy(self):
        return _alm.SwigPyIterator_copy(self)

    def next(self):
        return _alm.SwigPyIterator_next(self)

    def __next__(self):
        return _alm.SwigPyIterator___next__(self)

    def previous(self):
        return _alm.SwigPyIterator_previous(self)

    def advance(self, n):
        return _alm.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _alm.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _alm.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _alm.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _alm.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _alm.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _alm.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _alm:
_alm.SwigPyIterator_swigregister(SwigPyIterator)

class ALM_SetNumber(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _alm.ALM_SetNumber_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _alm.ALM_SetNumber___nonzero__(self)

    def __bool__(self):
        return _alm.ALM_SetNumber___bool__(self)

    def __len__(self):
        return _alm.ALM_SetNumber___len__(self)

    def append(self, x):
        return _alm.ALM_SetNumber_append(self, x)

    def __contains__(self, x):
        return _alm.ALM_SetNumber___contains__(self, x)

    def __getitem__(self, i):
        return _alm.ALM_SetNumber___getitem__(self, i)

    def add(self, x):
        return _alm.ALM_SetNumber_add(self, x)

    def discard(self, x):
        return _alm.ALM_SetNumber_discard(self, x)

    def __init__(self, *args):
        _alm.ALM_SetNumber_swiginit(self, _alm.new_ALM_SetNumber(*args))

    def empty(self):
        return _alm.ALM_SetNumber_empty(self)

    def size(self):
        return _alm.ALM_SetNumber_size(self)

    def clear(self):
        return _alm.ALM_SetNumber_clear(self)

    def swap(self, v):
        return _alm.ALM_SetNumber_swap(self, v)

    def count(self, x):
        return _alm.ALM_SetNumber_count(self, x)

    def begin(self):
        return _alm.ALM_SetNumber_begin(self)

    def end(self):
        return _alm.ALM_SetNumber_end(self)

    def rbegin(self):
        return _alm.ALM_SetNumber_rbegin(self)

    def rend(self):
        return _alm.ALM_SetNumber_rend(self)

    def erase(self, *args):
        return _alm.ALM_SetNumber_erase(self, *args)

    def find(self, x):
        return _alm.ALM_SetNumber_find(self, x)

    def lower_bound(self, x):
        return _alm.ALM_SetNumber_lower_bound(self, x)

    def upper_bound(self, x):
        return _alm.ALM_SetNumber_upper_bound(self, x)

    def equal_range(self, x):
        return _alm.ALM_SetNumber_equal_range(self, x)

    def insert(self, __x):
        return _alm.ALM_SetNumber_insert(self, __x)
    __swig_destroy__ = _alm.delete_ALM_SetNumber

# Register ALM_SetNumber in _alm:
_alm.ALM_SetNumber_swigregister(ALM_SetNumber)

class ALM_VectorNumber(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _alm.ALM_VectorNumber_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _alm.ALM_VectorNumber___nonzero__(self)

    def __bool__(self):
        return _alm.ALM_VectorNumber___bool__(self)

    def __len__(self):
        return _alm.ALM_VectorNumber___len__(self)

    def __getslice__(self, i, j):
        return _alm.ALM_VectorNumber___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _alm.ALM_VectorNumber___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _alm.ALM_VectorNumber___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _alm.ALM_VectorNumber___delitem__(self, *args)

    def __getitem__(self, *args):
        return _alm.ALM_VectorNumber___getitem__(self, *args)

    def __setitem__(self, *args):
        return _alm.ALM_VectorNumber___setitem__(self, *args)

    def pop(self):
        return _alm.ALM_VectorNumber_pop(self)

    def append(self, x):
        return _alm.ALM_VectorNumber_append(self, x)

    def empty(self):
        return _alm.ALM_VectorNumber_empty(self)

    def size(self):
        return _alm.ALM_VectorNumber_size(self)

    def swap(self, v):
        return _alm.ALM_VectorNumber_swap(self, v)

    def begin(self):
        return _alm.ALM_VectorNumber_begin(self)

    def end(self):
        return _alm.ALM_VectorNumber_end(self)

    def rbegin(self):
        return _alm.ALM_VectorNumber_rbegin(self)

    def rend(self):
        return _alm.ALM_VectorNumber_rend(self)

    def clear(self):
        return _alm.ALM_VectorNumber_clear(self)

    def get_allocator(self):
        return _alm.ALM_VectorNumber_get_allocator(self)

    def pop_back(self):
        return _alm.ALM_VectorNumber_pop_back(self)

    def erase(self, *args):
        return _alm.ALM_VectorNumber_erase(self, *args)

    def __init__(self, *args):
        _alm.ALM_VectorNumber_swiginit(self, _alm.new_ALM_VectorNumber(*args))

    def push_back(self, x):
        return _alm.ALM_VectorNumber_push_back(self, x)

    def front(self):
        return _alm.ALM_VectorNumber_front(self)

    def back(self):
        return _alm.ALM_VectorNumber_back(self)

    def assign(self, n, x):
        return _alm.ALM_VectorNumber_assign(self, n, x)

    def resize(self, *args):
        return _alm.ALM_VectorNumber_resize(self, *args)

    def insert(self, *args):
        return _alm.ALM_VectorNumber_insert(self, *args)

    def reserve(self, n):
        return _alm.ALM_VectorNumber_reserve(self, n)

    def capacity(self):
        return _alm.ALM_VectorNumber_capacity(self)
    __swig_destroy__ = _alm.delete_ALM_VectorNumber

# Register ALM_VectorNumber in _alm:
_alm.ALM_VectorNumber_swigregister(ALM_VectorNumber)

class ALM_VectorString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _alm.ALM_VectorString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _alm.ALM_VectorString___nonzero__(self)

    def __bool__(self):
        return _alm.ALM_VectorString___bool__(self)

    def __len__(self):
        return _alm.ALM_VectorString___len__(self)

    def __getslice__(self, i, j):
        return _alm.ALM_VectorString___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _alm.ALM_VectorString___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _alm.ALM_VectorString___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _alm.ALM_VectorString___delitem__(self, *args)

    def __getitem__(self, *args):
        return _alm.ALM_VectorString___getitem__(self, *args)

    def __setitem__(self, *args):
        return _alm.ALM_VectorString___setitem__(self, *args)

    def pop(self):
        return _alm.ALM_VectorString_pop(self)

    def append(self, x):
        return _alm.ALM_VectorString_append(self, x)

    def empty(self):
        return _alm.ALM_VectorString_empty(self)

    def size(self):
        return _alm.ALM_VectorString_size(self)

    def swap(self, v):
        return _alm.ALM_VectorString_swap(self, v)

    def begin(self):
        return _alm.ALM_VectorString_begin(self)

    def end(self):
        return _alm.ALM_VectorString_end(self)

    def rbegin(self):
        return _alm.ALM_VectorString_rbegin(self)

    def rend(self):
        return _alm.ALM_VectorString_rend(self)

    def clear(self):
        return _alm.ALM_VectorString_clear(self)

    def get_allocator(self):
        return _alm.ALM_VectorString_get_allocator(self)

    def pop_back(self):
        return _alm.ALM_VectorString_pop_back(self)

    def erase(self, *args):
        return _alm.ALM_VectorString_erase(self, *args)

    def __init__(self, *args):
        _alm.ALM_VectorString_swiginit(self, _alm.new_ALM_VectorString(*args))

    def push_back(self, x):
        return _alm.ALM_VectorString_push_back(self, x)

    def front(self):
        return _alm.ALM_VectorString_front(self)

    def back(self):
        return _alm.ALM_VectorString_back(self)

    def assign(self, n, x):
        return _alm.ALM_VectorString_assign(self, n, x)

    def resize(self, *args):
        return _alm.ALM_VectorString_resize(self, *args)

    def insert(self, *args):
        return _alm.ALM_VectorString_insert(self, *args)

    def reserve(self, n):
        return _alm.ALM_VectorString_reserve(self, n)

    def capacity(self):
        return _alm.ALM_VectorString_capacity(self)
    __swig_destroy__ = _alm.delete_ALM_VectorString

# Register ALM_VectorString in _alm:
_alm.ALM_VectorString_swigregister(ALM_VectorString)

class ALM_PairBoolean(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _alm.ALM_PairBoolean_swiginit(self, _alm.new_ALM_PairBoolean(*args))
    first = property(_alm.ALM_PairBoolean_first_get, _alm.ALM_PairBoolean_first_set)
    second = property(_alm.ALM_PairBoolean_second_get, _alm.ALM_PairBoolean_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _alm.delete_ALM_PairBoolean

# Register ALM_PairBoolean in _alm:
_alm.ALM_PairBoolean_swigregister(ALM_PairBoolean)

class ALM_VectorWString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _alm.ALM_VectorWString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _alm.ALM_VectorWString___nonzero__(self)

    def __bool__(self):
        return _alm.ALM_VectorWString___bool__(self)

    def __len__(self):
        return _alm.ALM_VectorWString___len__(self)

    def __getslice__(self, i, j):
        return _alm.ALM_VectorWString___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _alm.ALM_VectorWString___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _alm.ALM_VectorWString___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _alm.ALM_VectorWString___delitem__(self, *args)

    def __getitem__(self, *args):
        return _alm.ALM_VectorWString___getitem__(self, *args)

    def __setitem__(self, *args):
        return _alm.ALM_VectorWString___setitem__(self, *args)

    def pop(self):
        return _alm.ALM_VectorWString_pop(self)

    def append(self, x):
        return _alm.ALM_VectorWString_append(self, x)

    def empty(self):
        return _alm.ALM_VectorWString_empty(self)

    def size(self):
        return _alm.ALM_VectorWString_size(self)

    def swap(self, v):
        return _alm.ALM_VectorWString_swap(self, v)

    def begin(self):
        return _alm.ALM_VectorWString_begin(self)

    def end(self):
        return _alm.ALM_VectorWString_end(self)

    def rbegin(self):
        return _alm.ALM_VectorWString_rbegin(self)

    def rend(self):
        return _alm.ALM_VectorWString_rend(self)

    def clear(self):
        return _alm.ALM_VectorWString_clear(self)

    def get_allocator(self):
        return _alm.ALM_VectorWString_get_allocator(self)

    def pop_back(self):
        return _alm.ALM_VectorWString_pop_back(self)

    def erase(self, *args):
        return _alm.ALM_VectorWString_erase(self, *args)

    def __init__(self, *args):
        _alm.ALM_VectorWString_swiginit(self, _alm.new_ALM_VectorWString(*args))

    def push_back(self, x):
        return _alm.ALM_VectorWString_push_back(self, x)

    def front(self):
        return _alm.ALM_VectorWString_front(self)

    def back(self):
        return _alm.ALM_VectorWString_back(self)

    def assign(self, n, x):
        return _alm.ALM_VectorWString_assign(self, n, x)

    def resize(self, *args):
        return _alm.ALM_VectorWString_resize(self, *args)

    def insert(self, *args):
        return _alm.ALM_VectorWString_insert(self, *args)

    def reserve(self, n):
        return _alm.ALM_VectorWString_reserve(self, n)

    def capacity(self):
        return _alm.ALM_VectorWString_capacity(self)
    __swig_destroy__ = _alm.delete_ALM_VectorWString

# Register ALM_VectorWString in _alm:
_alm.ALM_VectorWString_swigregister(ALM_VectorWString)

class ALM_MapNumber(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _alm.ALM_MapNumber_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _alm.ALM_MapNumber___nonzero__(self)

    def __bool__(self):
        return _alm.ALM_MapNumber___bool__(self)

    def __len__(self):
        return _alm.ALM_MapNumber___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _alm.ALM_MapNumber___getitem__(self, key)

    def __delitem__(self, key):
        return _alm.ALM_MapNumber___delitem__(self, key)

    def has_key(self, key):
        return _alm.ALM_MapNumber_has_key(self, key)

    def keys(self):
        return _alm.ALM_MapNumber_keys(self)

    def values(self):
        return _alm.ALM_MapNumber_values(self)

    def items(self):
        return _alm.ALM_MapNumber_items(self)

    def __contains__(self, key):
        return _alm.ALM_MapNumber___contains__(self, key)

    def key_iterator(self):
        return _alm.ALM_MapNumber_key_iterator(self)

    def value_iterator(self):
        return _alm.ALM_MapNumber_value_iterator(self)

    def __setitem__(self, *args):
        return _alm.ALM_MapNumber___setitem__(self, *args)

    def asdict(self):
        return _alm.ALM_MapNumber_asdict(self)

    def __init__(self, *args):
        _alm.ALM_MapNumber_swiginit(self, _alm.new_ALM_MapNumber(*args))

    def empty(self):
        return _alm.ALM_MapNumber_empty(self)

    def size(self):
        return _alm.ALM_MapNumber_size(self)

    def swap(self, v):
        return _alm.ALM_MapNumber_swap(self, v)

    def begin(self):
        return _alm.ALM_MapNumber_begin(self)

    def end(self):
        return _alm.ALM_MapNumber_end(self)

    def rbegin(self):
        return _alm.ALM_MapNumber_rbegin(self)

    def rend(self):
        return _alm.ALM_MapNumber_rend(self)

    def clear(self):
        return _alm.ALM_MapNumber_clear(self)

    def get_allocator(self):
        return _alm.ALM_MapNumber_get_allocator(self)

    def count(self, x):
        return _alm.ALM_MapNumber_count(self, x)

    def erase(self, *args):
        return _alm.ALM_MapNumber_erase(self, *args)

    def find(self, x):
        return _alm.ALM_MapNumber_find(self, x)

    def lower_bound(self, x):
        return _alm.ALM_MapNumber_lower_bound(self, x)

    def upper_bound(self, x):
        return _alm.ALM_MapNumber_upper_bound(self, x)
    __swig_destroy__ = _alm.delete_ALM_MapNumber

# Register ALM_MapNumber in _alm:
_alm.ALM_MapNumber_swigregister(ALM_MapNumber)

class ALM_MapString(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _alm.ALM_MapString_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _alm.ALM_MapString___nonzero__(self)

    def __bool__(self):
        return _alm.ALM_MapString___bool__(self)

    def __len__(self):
        return _alm.ALM_MapString___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _alm.ALM_MapString___getitem__(self, key)

    def __delitem__(self, key):
        return _alm.ALM_MapString___delitem__(self, key)

    def has_key(self, key):
        return _alm.ALM_MapString_has_key(self, key)

    def keys(self):
        return _alm.ALM_MapString_keys(self)

    def values(self):
        return _alm.ALM_MapString_values(self)

    def items(self):
        return _alm.ALM_MapString_items(self)

    def __contains__(self, key):
        return _alm.ALM_MapString___contains__(self, key)

    def key_iterator(self):
        return _alm.ALM_MapString_key_iterator(self)

    def value_iterator(self):
        return _alm.ALM_MapString_value_iterator(self)

    def __setitem__(self, *args):
        return _alm.ALM_MapString___setitem__(self, *args)

    def asdict(self):
        return _alm.ALM_MapString_asdict(self)

    def __init__(self, *args):
        _alm.ALM_MapString_swiginit(self, _alm.new_ALM_MapString(*args))

    def empty(self):
        return _alm.ALM_MapString_empty(self)

    def size(self):
        return _alm.ALM_MapString_size(self)

    def swap(self, v):
        return _alm.ALM_MapString_swap(self, v)

    def begin(self):
        return _alm.ALM_MapString_begin(self)

    def end(self):
        return _alm.ALM_MapString_end(self)

    def rbegin(self):
        return _alm.ALM_MapString_rbegin(self)

    def rend(self):
        return _alm.ALM_MapString_rend(self)

    def clear(self):
        return _alm.ALM_MapString_clear(self)

    def get_allocator(self):
        return _alm.ALM_MapString_get_allocator(self)

    def count(self, x):
        return _alm.ALM_MapString_count(self, x)

    def erase(self, *args):
        return _alm.ALM_MapString_erase(self, *args)

    def find(self, x):
        return _alm.ALM_MapString_find(self, x)

    def lower_bound(self, x):
        return _alm.ALM_MapString_lower_bound(self, x)

    def upper_bound(self, x):
        return _alm.ALM_MapString_upper_bound(self, x)
    __swig_destroy__ = _alm.delete_ALM_MapString

# Register ALM_MapString in _alm:
_alm.ALM_MapString_swigregister(ALM_MapString)

class ALM_PairBoolNumber(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _alm.ALM_PairBoolNumber_swiginit(self, _alm.new_ALM_PairBoolNumber(*args))
    first = property(_alm.ALM_PairBoolNumber_first_get, _alm.ALM_PairBoolNumber_first_set)
    second = property(_alm.ALM_PairBoolNumber_second_get, _alm.ALM_PairBoolNumber_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _alm.delete_ALM_PairBoolNumber

# Register ALM_PairBoolNumber in _alm:
_alm.ALM_PairBoolNumber_swigregister(ALM_PairBoolNumber)

options_t_debug = _alm.options_t_debug
options_t_onlyGood = _alm.options_t_onlyGood
options_t_mixdicts = _alm.options_t_mixdicts
options_t_confidence = _alm.options_t_confidence
class ppl_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    oovs = property(_alm.ppl_t_oovs_get, _alm.ppl_t_oovs_set)
    words = property(_alm.ppl_t_words_get, _alm.ppl_t_words_set)
    sentences = property(_alm.ppl_t_sentences_get, _alm.ppl_t_sentences_set)
    zeroprobs = property(_alm.ppl_t_zeroprobs_get, _alm.ppl_t_zeroprobs_set)
    logprob = property(_alm.ppl_t_logprob_get, _alm.ppl_t_logprob_set)
    ppl = property(_alm.ppl_t_ppl_get, _alm.ppl_t_ppl_set)
    ppl1 = property(_alm.ppl_t_ppl1_get, _alm.ppl_t_ppl1_set)

    def __init__(self):
        _alm.ppl_t_swiginit(self, _alm.new_ppl_t())
    __swig_destroy__ = _alm.delete_ppl_t

# Register ppl_t in _alm:
_alm.ppl_t_swigregister(ppl_t)

class callback_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def status(self, status):
        return _alm.callback_t_status(self, status)

    def text(self, text):
        return _alm.callback_t_text(self, text)

    def sentences(self, sentences):
        return _alm.callback_t_sentences(self, sentences)

    def utoken(self, token, word):
        return _alm.callback_t_utoken(self, token, word)

    def tokens(self, word, context, reset, stop):
        return _alm.callback_t_tokens(self, word, context, reset, stop)
    __swig_destroy__ = _alm.delete_callback_t

    def __init__(self):
        if self.__class__ == callback_t:
            _self = None
        else:
            _self = self
        _alm.callback_t_swiginit(self, _alm.new_callback_t(_self, ))
    def __disown__(self):
        self.this.disown()
        _alm.disown_callback_t(self)
        return weakref.proxy(self)

# Register callback_t in _alm:
_alm.callback_t_swigregister(callback_t)

class lm_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def perplexity(self, *args):
        return _alm.lm_t_perplexity(self, *args)

    def pplByFiles(self, *args):
        return _alm.lm_t_pplByFiles(self, *args)

    def pplConcatenate(self, ppl1, ppl2):
        return _alm.lm_t_pplConcatenate(self, ppl1, ppl2)

    def check(self, *args):
        return _alm.lm_t_check(self, *args)

    def fixUppers(self, text):
        return _alm.lm_t_fixUppers(self, text)

    def context(self, seq, nwrd=False):
        return _alm.lm_t_context(self, seq, nwrd)

    def clear(self):
        return _alm.lm_t_clear(self)

    def initPython(self):
        return _alm.lm_t_initPython(self)

    def clearBadwords(self):
        return _alm.lm_t_clearBadwords(self)

    def clearGoodwords(self):
        return _alm.lm_t_clearGoodwords(self)

    def clearUserTokens(self):
        return _alm.lm_t_clearUserTokens(self)

    def setAllTokenUnknown(self):
        return _alm.lm_t_setAllTokenUnknown(self)

    def setAllTokenDisable(self):
        return _alm.lm_t_setAllTokenDisable(self)

    def addBadword(self, *args):
        return _alm.lm_t_addBadword(self, *args)

    def addGoodword(self, *args):
        return _alm.lm_t_addGoodword(self, *args)

    def sentences(self):
        return _alm.lm_t_sentences(self)

    def setUnknown(self, word):
        return _alm.lm_t_setUnknown(self, word)

    def find(self, text):
        return _alm.lm_t_find(self, text)

    def setOption(self, option):
        return _alm.lm_t_setOption(self, option)

    def unsetOption(self, option):
        return _alm.lm_t_unsetOption(self, option)

    def setLogfile(self, logfile):
        return _alm.lm_t_setLogfile(self, logfile)

    def setOOvFile(self, oovfile):
        return _alm.lm_t_setOOvFile(self, oovfile)

    def setUserToken(self, name):
        return _alm.lm_t_setUserToken(self, name)

    def setThreads(self, threads=0):
        return _alm.lm_t_setThreads(self, threads)

    def setWordScript(self, script):
        return _alm.lm_t_setWordScript(self, script)

    def setTokenUnknown(self, options):
        return _alm.lm_t_setTokenUnknown(self, options)

    def setTokenDisable(self, options):
        return _alm.lm_t_setTokenDisable(self, options)

    def setUserTokenMethod(self, name):
        return _alm.lm_t_setUserTokenMethod(self, name)

    def setUserTokenScript(self, script):
        return _alm.lm_t_setUserTokenScript(self, script)

    def setBadwords(self, *args):
        return _alm.lm_t_setBadwords(self, *args)

    def setTokensUnknown(self, tokens):
        return _alm.lm_t_setTokensUnknown(self, tokens)

    def setTokensDisable(self, tokens):
        return _alm.lm_t_setTokensDisable(self, tokens)

    def setGoodwords(self, *args):
        return _alm.lm_t_setGoodwords(self, *args)

    def read(self, *args):
        return _alm.lm_t_read(self, *args)

    def getUppers(self, seq, upps):
        return _alm.lm_t_getUppers(self, seq, upps)

    def sentencesToFile(self, counts, filename):
        return _alm.lm_t_sentencesToFile(self, counts, filename)

    def findByFiles(self, *args):
        return _alm.lm_t_findByFiles(self, *args)

    def fixUppersByFiles(self, *args):
        return _alm.lm_t_fixUppersByFiles(self, *args)

    def countsByFiles(self, *args):
        return _alm.lm_t_countsByFiles(self, *args)

    def checkByFiles(self, *args):
        return _alm.lm_t_checkByFiles(self, *args)

    def getAlphabet(self):
        return _alm.lm_t_getAlphabet(self)

    def rest(self, word):
        return _alm.lm_t_rest(self, word)

    def arabic2Roman(self, *args):
        return _alm.lm_t_arabic2Roman(self, *args)

    def delPunctInWord(self, word):
        return _alm.lm_t_delPunctInWord(self, word)

    def delBrokenInWord(self, word):
        return _alm.lm_t_delBrokenInWord(self, word)

    def delHyphenInWord(self, word):
        return _alm.lm_t_delHyphenInWord(self, word)

    def countAlphabet(self):
        return _alm.lm_t_countAlphabet(self)

    def roman2Arabic(self, word):
        return _alm.lm_t_roman2Arabic(self, word)

    def countLetter(self, word, letter):
        return _alm.lm_t_countLetter(self, word, letter)

    def isUrl(self, word):
        return _alm.lm_t_isUrl(self, word)

    def isLatian(self, str):
        return _alm.lm_t_isLatian(self, str)

    def isMath(self, letter):
        return _alm.lm_t_isMath(self, letter)

    def isNumber(self, word):
        return _alm.lm_t_isNumber(self, word)

    def isUpper(self, letter):
        return _alm.lm_t_isUpper(self, letter)

    def isPunct(self, letter):
        return _alm.lm_t_isPunct(self, letter)

    def isSpace(self, letter):
        return _alm.lm_t_isSpace(self, letter)

    def isANumber(self, word):
        return _alm.lm_t_isANumber(self, word)

    def isAllowed(self, word):
        return _alm.lm_t_isAllowed(self, word)

    def isDecimal(self, word):
        return _alm.lm_t_isDecimal(self, word)

    def isSpecial(self, letter):
        return _alm.lm_t_isSpecial(self, letter)

    def isIsolation(self, letter):
        return _alm.lm_t_isIsolation(self, letter)

    def checkHome2(self, word):
        return _alm.lm_t_checkHome2(self, word)

    def checkLatian(self, str):
        return _alm.lm_t_checkLatian(self, str)

    def checkHyphen(self, str):
        return _alm.lm_t_checkHyphen(self, str)

    def checkSimilars(self, str):
        return _alm.lm_t_checkSimilars(self, str)

    def checkLetter(self, letter):
        return _alm.lm_t_checkLetter(self, letter)

    def getSubstitutes(self):
        return _alm.lm_t_getSubstitutes(self)

    def urls(self, text):
        return _alm.lm_t_urls(self, text)

    def checkHypLat(self, str):
        return _alm.lm_t_checkHypLat(self, str)

    def setzone(self, zone):
        return _alm.lm_t_setzone(self, zone)

    def setCallback(self, callback):
        return _alm.lm_t_setCallback(self, callback)

    def setAlphabet(self, alphabet):
        return _alm.lm_t_setAlphabet(self, alphabet)

    def setlocale(self, *args):
        return _alm.lm_t_setlocale(self, *args)

    def setSubstitutes(self, letters):
        return _alm.lm_t_setSubstitutes(self, letters)

    def idw(self, word):
        return _alm.lm_t_idw(self, word)

    def idt(self, word):
        return _alm.lm_t_idt(self, word)

    def isAllowApostrophe(self):
        return _alm.lm_t_isAllowApostrophe(self)

    def isAbbr(self, word):
        return _alm.lm_t_isAbbr(self, word)

    def restore(self, context):
        return _alm.lm_t_restore(self, context)

    def fti(self, num, count=0):
        return _alm.lm_t_fti(self, num, count)

    def switchAllowApostrophe(self):
        return _alm.lm_t_switchAllowApostrophe(self)

    def setAbbr(self, word):
        return _alm.lm_t_setAbbr(self, word)

    def jsonToText(self, text):
        return _alm.lm_t_jsonToText(self, text)

    def textToJson(self, text):
        return _alm.lm_t_textToJson(self, text)

    def tokenization(self, text):
        return _alm.lm_t_tokenization(self, text)

    def getSize(self):
        return _alm.lm_t_getSize(self)

    def getVersion(self):
        return _alm.lm_t_getVersion(self)

    def getUnknown(self):
        return _alm.lm_t_getUnknown(self)

    def getWordScript(self):
        return _alm.lm_t_getWordScript(self)

    def getUserTokenScript(self):
        return _alm.lm_t_getUserTokenScript(self)

    def getBadwords(self):
        return _alm.lm_t_getBadwords(self)

    def getGoodwords(self):
        return _alm.lm_t_getGoodwords(self)

    def getTokensUnknown(self):
        return _alm.lm_t_getTokensUnknown(self)

    def getTokensDisable(self):
        return _alm.lm_t_getTokensDisable(self)

    def getUserTokens(self):
        return _alm.lm_t_getUserTokens(self)

    def grams(self, *args):
        return _alm.lm_t_grams(self, *args)

    def bigrams(self, *args):
        return _alm.lm_t_bigrams(self, *args)

    def trigrams(self, *args):
        return _alm.lm_t_trigrams(self, *args)

    def getUserTokenWord(self, idw):
        return _alm.lm_t_getUserTokenWord(self, idw)

    def getUserTokenId(self, name):
        return _alm.lm_t_getUserTokenId(self, name)

    def __init__(self, *args):
        _alm.lm_t_swiginit(self, _alm.new_lm_t(*args))
    __swig_destroy__ = _alm.delete_lm_t

# Register lm_t in _alm:
_alm.lm_t_swigregister(lm_t)



